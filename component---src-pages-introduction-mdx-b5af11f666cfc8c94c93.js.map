{"version":3,"file":"component---src-pages-introduction-mdx-b5af11f666cfc8c94c93.js","mappings":"mWAgBaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAGa,SAASE,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,4BACA,yFACA,QAAC,IAAD,CAAQC,OAAQC,EAAAA,KAAWC,KAAMC,EAAOJ,QAAQ,YAChD,+GAAiG,aAAGK,WAAW,IAC3G,KAAQ,oCADqF,aAAjG,kBAEwC,aAAGA,WAAW,IAClD,KAAQ,oCAD4B,QAFxC,oCAIqD,aAAGA,WAAW,IAC/D,KAAQ,sCADyC,OAJrD,mCAMmD,aAAGA,WAAW,IAC7D,KAAQ,2DADuC,cANnD,gEAQuF,aAAGA,WAAW,IACjG,KAAQ,0BAD2E,cARvF,yBAUgD,QAAC,IAAD,CAAiBC,KAAMC,EAAAA,IAAcP,QAAQ,oBAV7F,0DAWA,mcACA,wCACA,mVACA,6OAA+N,QAAC,IAAD,CAAiBM,KAAMC,EAAAA,IAAcP,QAAQ,oBAA5Q,yCAAyU,sBAAYK,WAAW,KAAvB,MAAzU,MACA,QAAC,IAAD,CAAQJ,OAAQO,EAAAA,KAAgBL,KAAMM,EAAYT,QAAQ,YAC1D,2CAA6B,sBAAYK,WAAW,KAAvB,MAA7B,wDAAmI,QAAC,IAAD,CAAiBC,KAAMI,EAAAA,IAAcV,QAAQ,oBAAhL,uBAA2N,sBAAYK,WAAW,KAAvB,MAA3N,yCAAkT,sBAAYA,WAAW,KAAvB,MAAlT,QAAwW,sBAAYA,WAAW,KAAvB,MAAxW,iBAAua,QAAC,IAAD,CAAiBC,KAAMC,EAAAA,IAAcP,QAAQ,oBAApd,oDAA4hB,sBAAYK,WAAW,KAAvB,UAA5hB,MAAolB,sBAAYA,WAAW,KAAvB,MAAplB,MACA,6FACA,QAAC,IAAD,CAAQJ,OAAQU,EAAAA,KAAoBR,KAAMS,EAAgBZ,QAAQ,YAClE,mIAAqH,aAAGK,WAAW,IAC/H,KAAQ,2CADyG,uBAArH,YAE4C,cAAIA,WAAW,KAAf,SAF5C,SAEsF,cAAIA,WAAW,KAAf,SAFtF,sFAE6M,aAAGA,WAAW,IACvN,KAAQ,gGADiM,WAF7M,UAI8B,aAAGA,WAAW,IACxC,KAAQ,yGADkB,cAJ9B,cAMqC,aAAGA,WAAW,IAC/C,KAAQ,6GADyB,gBANrC,4QASA,gbACA,2BACE,aAAGA,WAAW,eAAa,aAAGA,WAAW,IACrC,KAAQ,8CADe,cAA3B,6GAQNR,EAAWgB,gBAAiB","sources":["webpack://soundly-functional/./src/pages/introduction.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Player } from \"../components/player\";\nimport intro from \"../FPSound/C01/Intro.purs\";\nimport { main as introMain } from \"../../output/FPSound.C01.Intro/\";\nimport singleNote from \"../FPSound/C01/SingleNote.purs\";\nimport { main as singleNoteMain } from \"../../output/FPSound.C01.SingleNote/\";\nimport complexPattern from \"../FPSound/C01/ComplexPattern.purs\";\nimport { main as complexPatternMain } from \"../../output/FPSound.C01.ComplexPattern/\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlayCircle, faStopCircle } from \"@fortawesome/free-solid-svg-icons\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Hi ðŸ‘‹`}</h1>\n    <p>{`I'm Mike, and I use functional programming to make music and noise.`}</p>\n    <Player player={introMain} code={intro} mdxType=\"Player\" />\n    <p>{`The example above would be difficult or impossible to create using a traditional DAW like `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.apple.com/logic-pro/\"\n      }}>{`Logic Pro`}</a>{`, a tool like `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.ableton.com/en/live/\"\n      }}>{`Live`}</a>{`, a visual coding language like `}<a parentName=\"p\" {...{\n        \"href\": \"https://cycling74.com/products/max\"\n      }}>{`Max`}</a>{` or a procedural language like `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript\"\n      }}>{`JavaScript`}</a>{`. Instead, I've written it in a programming language called `}<a parentName=\"p\" {...{\n        \"href\": \"https://purescript.org\"\n      }}>{`PureScript`}</a>{`, and when you click `}<FontAwesomeIcon icon={faPlayCircle} mdxType=\"FontAwesomeIcon\" />{`, it is rendering right in your browser in real-time.`}</p>\n    <p>{`I believe that millions of musical voices are not realizing their full potential because modern digital tooling enforces paradigms that, while useful, ultimately stifle creativity. Functional programming (or \"FP\") never ceases to provide fresh ideas that enable, motivate, and inspire me to create radically new work. I hope that, by the end of our time together, you'll feel the same way about the toolbox that FP has to offer.`}</p>\n    <h2>{`The journey ahead`}</h2>\n    <p>{`Over the next few lessons, we'll go over rhythms, functors, chords, products, improvisation, co-ends, mysticism and dependent types (amongst other things). The goal will be to use music to strengthen our intuition about functional programming and to use functional programming to strengthen our intuition about music.`}</p>\n    <p>{`During this journey, we will frequently make use of our fingers to type or edit code and our ears to listen. The basic interface, which you will see time and time again, is the editor pane. Go on, click or press the `}<FontAwesomeIcon icon={faPlayCircle} mdxType=\"FontAwesomeIcon\" />{` button below and listen to the note `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{`.`}</p>\n    <Player player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`In the example above, `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{` is a pitch representing middle-c on a piano. Press `}<FontAwesomeIcon icon={faStopCircle} mdxType=\"FontAwesomeIcon\" />{` and then click on `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{` to edit the code.  Try changing the `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`d4`}</inlineCode>{`, then press `}<FontAwesomeIcon icon={faPlayCircle} mdxType=\"FontAwesomeIcon\" />{` again and listen to the difference. What about `}<inlineCode parentName=\"p\">{`aFlat4`}</inlineCode>{`? `}<inlineCode parentName=\"p\">{`c5`}</inlineCode>{`?`}</p>\n    <p>{`In just a few lines of code, we can already arrive at complex patterns.`}</p>\n    <Player player={complexPatternMain} code={complexPattern} mdxType=\"Player\" />\n    <p>{`If you've never worked with functional programming or with music before, don't worry. You just listened to an `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Isorhythm\"\n      }}>{`isorhythmic pattern`}</a>{` with a `}<em parentName=\"p\">{`talea`}</em>{` and `}<em parentName=\"p\">{`color`}</em>{`, and the code in the example uses a several powerful abstractions, including the `}<a parentName=\"p\" {...{\n        \"href\": \"https://pursuit.purescript.org/packages/purescript-prelude/5.0.1/docs/Data.Functor#t:Functor\"\n      }}>{`functor`}</a>{`, the `}<a parentName=\"p\" {...{\n        \"href\": \"https://pursuit.purescript.org/packages/purescript-profunctor/5.0.0/docs/Data.Profunctor#t:Profunctor\"\n      }}>{`profunctor`}</a>{`, and the `}<a parentName=\"p\" {...{\n        \"href\": \"https://pursuit.purescript.org/packages/purescript-prelude/5.0.1/docs/Control.Semigroupoid#t:Semigroupoid\"\n      }}>{`semigroupoid`}</a>{`. We'll learn about what all these concepts mean and revisit some of them multiple times. The important thing to know is that one domain will always reinforce the other, stimulating our creativity and leading us to new territory as both musicians and programmers.`}</p>\n    <p>{`Lastly, a bit of housekeeping. All you need is a browser to follow along, play the audio examples, and edit them to your heart's content. However, at a certain point, you may want to experiment/compose on your local machine or jam with others on a shared server. At the end of every lesson, including this one, there will be a link to a page where you can learn how to set up your own music-making environment.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"https://github.com/mikesol/purescript-wags\"\n        }}>{`Click here`}</a>{` for additional resources for working with these examples on the cloud, on Windows, on Mac or on Linux.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","player","introMain","code","intro","parentName","icon","faPlayCircle","singleNoteMain","singleNote","faStopCircle","complexPatternMain","complexPattern","isMDXComponent"],"sourceRoot":""}