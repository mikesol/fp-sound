{"version":3,"file":"component---src-pages-crash-course-mdx-9c8d92414d62cff06ac1.js","mappings":"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","sources":["webpack://soundly-functional/./src/pages/crash-course.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Player } from \"../components/player\";\nimport Footer from \"../components/footer\";\nimport Next from \"../components/next\";\nimport single from \"../FPSound/CrashCourse/Single.purs\";\nimport { main as singleMain } from \"../../output/FPSound.CrashCourse.Single/\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Crash course`}</h1>\n    <p>{`This page is a crash course for `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/purescript-wags\"\n      }}><inlineCode parentName=\"a\">{`purescript-wags`}</inlineCode></a>{`, the web audio library that powers `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/wags.fm\"\n      }}><inlineCode parentName=\"a\">{`wags.fm`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/wagsi\"\n      }}><inlineCode parentName=\"a\">{`wagsi`}</inlineCode></a>{`.`}</p>\n    <h2>{`A single hi-hat`}</h2>\n    <p>{`Let's start with a single hi-hat.`}</p>\n    <Player player={singleMain} code={single} mdxType=\"Player\" />\n    <p>{`Wags is written in `}<a parentName=\"p\" {...{\n        \"href\": \"https://purescript.org\"\n      }}>{`PureScript`}</a>{`. But you don't need to know PureScript in order to use wags. In the example above, change `}<inlineCode parentName=\"p\">{`hh:0`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`bd:0`}</inlineCode>{` (bass drum), stop it, and start it again. Change it to `}<inlineCode parentName=\"p\">{`sn:0`}</inlineCode>{` (snare), stop it, and start it again. You can change to any of the sounds on `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/wagsi/blob/main/SOUNDS.md\"\n      }}>{`this site`}</a>{` and you should hear something.`}</p>\n    <p>{`You can copy this and all other examples into the `}<em parentName=\"p\">{`blank slate`}</em>{` example on `}<a parentName=\"p\" {...{\n        \"href\": \"https://wags.fm\"\n      }}>{`wags.fm`}</a>{` and they will work out of the box.`}</p>\n    <h2>{`More notes`}</h2>\n    <p>{`When you add more events in the sequence, they are played in sequence.  The example above has four different events. You can add some or subtract some, stop, and play again to hear the difference.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Faster loops`}</h2>\n    <p>{`Let's make our loop faster. You'll see that this example is the same as the example above but twice the speed. This is because the first value passed to `}<inlineCode parentName=\"p\">{`make`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`0.4`}</inlineCode>{`, or half of the value used above.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Silence`}</h2>\n    <p>{`Silence is golden! Use a tidla (`}<inlineCode parentName=\"p\">{`~`}</inlineCode>{`) to add silence in place of a note.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Simultaneous events`}</h2>\n    <p>{`Sometimes, you want two events to happen at the same time. You can do this by putting a square bracket around them and separating them with a comma. More than two events, no problem, just add more commas.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Branching events`}</h2>\n    <p>{`Hearing the same loop over and over again is boring. Spice it up with `}<em parentName=\"p\">{`branching`}</em>{`. Each time the example loops, a different branch will be chosen.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Polyrhythms`}</h2>\n    <p>{`You can have more than one note when you use a comma (`}<inlineCode parentName=\"p\">{`,`}</inlineCode>{`) to separate them. When you do this, you create polyrhythms. Let's listen to 3 on 4.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Voices`}</h2>\n    <p>{`Up until now, we've only used one voice called `}<inlineCode parentName=\"p\">{`earth`}</inlineCode>{`. Let's add a new voice called `}<inlineCode parentName=\"p\">{`wind`}</inlineCode>{`. The three possible voices are `}<inlineCode parentName=\"p\">{`earth`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`wind`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`fire`}</inlineCode>{`. Different voices are helpful when we want to add effects (we'll do this later).`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Drones`}</h2>\n    <p>{`To add a drone, you can use the `}<inlineCode parentName=\"p\">{`water`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`heart`}</inlineCode>{` voice. You'll also need to import the `}<inlineCode parentName=\"p\">{`Drones`}</inlineCode>{` sound pack from `}<inlineCode parentName=\"p\">{`WAGS.Lib`}</inlineCode>{`. Sound packs are additional sounds that are not included with the standard distro.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Changing the volume of a note`}</h2>\n    <p>{`You can give any note a tag using a semi-colon (`}<inlineCode parentName=\"p\">{`;`}</inlineCode>{`). Then, use the `}<inlineCode parentName=\"p\">{`onTag`}</inlineCode>{` function to grab the note and `}<inlineCode parentName=\"p\">{`changeVolume`}</inlineCode>{` to change the volume. Note the use of `}<inlineCode parentName=\"p\">{`const`}</inlineCode>{`, which is a PureScript function that returns constant values.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Changing the rate (pitch) of a note`}</h2>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`changeRate`}</inlineCode>{` to change the rate of a note.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Working with functions of time`}</h2>\n    <p>{`It's often useful to work with functions of time. You can modify both rate and volume as a function of time. There are many different representations of time, so choose wisely! The example below uses:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`clockTime`}</inlineCode>{` to change the rate`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`sampleTime`}</inlineCode>{` to change the volume`}</li>\n    </ul>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <p>{`Other types of time you can use include`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`littleCycleTime`}</inlineCode>{`: the time since the branch of a cycle started. For example, if you have a cycle that lasts 4 seconds with 5 branches and you just started branch 3, the value will be `}<inlineCode parentName=\"li\">{`0.0`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bigCycleTime`}</inlineCode>{`: the time since the last cycle started. For example, if you have a cycle that lasts 4 seconds with 5 branches and you just started branch 3, the value will be `}<inlineCode parentName=\"li\">{`12.0`}</inlineCode>{`.`}</li>\n    </ul>\n    <h2>{`Adding effects`}</h2>\n    <p>{`You can add aribtrary effects chains to voices.`}</p>\n    <h3>{`High-pass filter`}</h3>\n    <p>{`Let's add a high-pass filter to create a sweeping effect.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h3>{`Pan`}</h3>\n    <p>{`Let's now try a pan.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h3>{`Synthetic sounds`}</h3>\n    <p>{`Let's add a few sine-wave oscillators.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h3>{`Delays and feedback`}</h3>\n    <p>{`To create a feedback delay, use the `}<inlineCode parentName=\"p\">{`delay`}</inlineCode>{` effect as well as `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{`, which is a reference to another node in the graph. In this case, `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` refers to `}<inlineCode parentName=\"p\">{`myGain`}</inlineCode>{`, which is the gain node that we created elsewhere in the graph.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h3>{`Other effects`}</h3>\n    <p>{`I unfortunately haven't had time to document all the effects yet, but they are all here in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/purescript-wags/blob/main/src/WAGS/Create/Optionals.purs\"\n      }}>{`this module`}</a>{`. Here is a \"kitchen sink\" example that uses a lot of them.`}</p>\n    <Player stub player={singleMain} code={single} mdxType=\"Player\" />\n    <h2>{`Inspiration`}</h2>\n    <p><inlineCode parentName=\"p\">{`wags`}</inlineCode>{` is heavily indebted to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://tidalcycles.org/\"\n      }}>{`Tidal Cycles`}</a>{` project, which inspired its mini-notation. It also makes heavy use of:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`the `}<a parentName=\"li\" {...{\n          \"href\": \"https://purescript.org\"\n        }}>{`PureScript Programming Language`}</a>{`, a purely functional language originally created by `}<a parentName=\"li\" {...{\n          \"href\": \"https://twitter.com/paf31\"\n        }}>{`Phil Freeman`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`cofree comonads, an idea popularized (if not invented) by `}<a parentName=\"li\" {...{\n          \"href\": \"https://twitter.com/kmett\"\n        }}>{`Edward Kmett`}</a>{`.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Functional_reactive_programming\"\n        }}>{`functional reactive programming`}</a>{`, a technique popularized by Conal Elliott and Paul Hudak.`}</li>\n    </ul>\n    <h2>{`What next?`}</h2>\n    <p>{`You could:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`listen to a track on `}<a parentName=\"li\" {...{\n          \"href\": \"https://wags.fm\"\n        }}>{`wags.fm`}</a>{`. All of the tracks are editable in real-time just like these examples. You could also propose your own track on the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mikesol/wags.fm\"\n        }}>{`GitHub`}</a>{` or leave a suggestion on the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mikesol/wags.fm/issues\"\n        }}>{`issues page`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`use `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mikesol/wagsi\"\n        }}>{`wagsi`}</a>{` to `}<a parentName=\"li\" {...{\n          \"href\": \"https://twitter.com/stronglynormal/status/1459623955719991299\"\n        }}>{`DJ your own session`}</a>{` and collaborate with others as you do. Our community has one jam session a month, and we usually meet up on the `}<inlineCode parentName=\"li\">{`#music`}</inlineCode>{` channel of the `}<a parentName=\"li\" {...{\n          \"href\": \"https://purescript.org/chat\"\n        }}>{`PureScript Discord`}</a>{` server.`}</li>\n      <li parentName=\"ul\">{`dive into the examples on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/mikesol/purescript-wags-lib\"\n        }}><inlineCode parentName=\"a\">{`purescript-wags-lib`}</inlineCode></a>{` for more advanced use cases, including using `}<a parentName=\"li\" {...{\n          \"href\": \"\"\n        }}>{`TensorFlow.js to create markov models`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"\"\n        }}>{`controlling the music with a mouse`}</a>{`.`}</li>\n    </ul>\n    <p>{`I wish you lots of satisfaction as you play with wags to create music, noise, or whatever makes your ears perk up. Happy wagging!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","player","singleMain","code","single","stub","isMDXComponent"],"sourceRoot":""}