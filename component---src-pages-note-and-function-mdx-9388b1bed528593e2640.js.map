{"version":3,"file":"component---src-pages-note-and-function-mdx-9388b1bed528593e2640.js","mappings":"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","sources":["webpack://soundly-functional/./src/pages/note-and-function.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Player } from \"../components/player\";\nimport singleNote from \"../FPSound/C01/SingleNote.purs\";\nimport { main as singleNoteMain } from \"../../output/FPSound.C01.SingleNote/\";\nimport fadeNote from \"../FPSound/C02/FadeNote.purs\";\nimport { main as fadeNoteMain } from \"../../output/FPSound.C02.FadeNote/\";\nimport fadeNoteAlt from \"../FPSound/C02/FadeNoteAlt.purs\";\nimport { main as fadeNoteAltMain } from \"../../output/FPSound.C02.FadeNoteAlt/\";\nimport fadeNoteEta from \"../FPSound/C02/FadeNoteEta.purs\";\nimport { main as fadeNoteEtaMain } from \"../../output/FPSound.C02.FadeNoteEta/\";\nimport fadeNoteGuard from \"../FPSound/C02/FadeNoteGuard.purs\";\nimport { main as fadeNoteGuardMain } from \"../../output/FPSound.C02.FadeNoteGuard/\";\nimport fadeNoteLfo from \"../FPSound/C02/FadeNoteLFO.purs\";\nimport { main as fadeNoteLfoMain } from \"../../output/FPSound.C02.FadeNoteLFO/\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlayCircle, faStopCircle } from \"@fortawesome/free-solid-svg-icons\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`The note and the function`}</h1>\n    <p>{`We'll start our journey with a single note. This note will be produced by a sine-wave oscillator. When you click `}<FontAwesomeIcon icon={faPlayCircle} mdxType=\"FontAwesomeIcon\" />{`, the computer will send instructions to your loudspeaker or headphones to oscillate back and forth in sinusoidal motion. This creates wave-like variations in air pressure that propagate all the way to your ear. Middle-C, the note below, will cause the air around you to oscillate 264 times a second. This pattern is far too fast for us to perceive each individual oscillation. Our ear clumps the oscillations together as a pattern, and we hear it as the note middle-C. You can also check out this `}<a parentName=\"p\" {...{\n        \"href\": \"https://pudding.cool/2018/02/waveforms/\"\n      }}>{`amazing interactive article about how sound works`}</a>{`.`}</p>\n    <Player player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`Our single note is accompanied by a short program: the minimal amount of information we need to play back the note. The program starts by defining a `}<strong parentName=\"p\">{`module`}</strong>{`. By calling this module `}<inlineCode parentName=\"p\">{`Main`}</inlineCode>{`, we're telling the compiler that this is where the main action of our program resides. This is followed by a series of `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{` statements declaring what types and terms we'll use from other libraries (I'll define \"type\" and \"term\" below). Lastly, the actual program called `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` exists on two levels: the type-level (its type is `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{`) and on the term-level (its terms are `}<inlineCode parentName=\"p\">{`play`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{`). This distinction between, and eventually interplay of, types and terms will be crucial to our reasoning about music and functional programs.`}</p>\n    <h2>{`Types and terms`}</h2>\n    <p>{`Functional programs contain two basic units of composition: `}<em parentName=\"p\">{`types`}</em>{` and `}<em parentName=\"p\">{`terms`}</em>{`. These units form the basis of a play staring three core protagonists: you, a compiler, and a computer. A `}<em parentName=\"p\">{`term`}</em>{` points to some chunk of memory on a computer that stores an opaque series of bytes. We give the term a name like `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`play`}</inlineCode>{` to indicate to other readers what it `}<em parentName=\"p\">{`is`}</em>{` or `}<em parentName=\"p\">{`does`}</em>{`. A `}<em parentName=\"p\">{`type`}</em>{` is an assertion to the compiler about how a term can be used in a program. Types have names like `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{`. When the compiler receives an assertion in the form of a type, it can either accept the assertion, reject it, or punt until it receives more information. In our program above, the compiler `}<em parentName=\"p\">{`accepts`}</em>{` the assertion that `}<inlineCode parentName=\"p\">{`play c4`}</inlineCode>{` has the type `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{`. When all the assertions in a program are accepted, we say a program compiles, and the compiler sends the program off to the computer to do something interesting like render it to your screen, play it through your loudspeakers, or save it for a rainy day.`}</p>\n    <p>{`Let's revisit the program above:`}</p>\n    <Player player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`It contains one type assertion - that `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{` - and three terms:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`main`}</inlineCode>{`, whose type is asserted to be `}<inlineCode parentName=\"li\">{`Player`}</inlineCode>{`;`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`play`}</inlineCode>{`, whose type is `}<inlineCode parentName=\"li\">{`Function Pitch Player`}</inlineCode>{`; and`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`c4`}</inlineCode>{`, whose type is `}<inlineCode parentName=\"li\">{`Pitch`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`Often times, when talking about functions, we'll use an infix notation of a right-pointing arrow `}<inlineCode parentName=\"p\">{`->`}</inlineCode>{`. So, `}<inlineCode parentName=\"p\">{`play`}</inlineCode>{` can be rewritten as `}<inlineCode parentName=\"p\">{`Pitch -> Player`}</inlineCode>{`.`}</p>\n    <p>{`When the compiler compiles the program, it treats every function as an `}<em parentName=\"p\">{`if/then`}</em>{` proposition and makes sure that we've provided enough evidence to prove this proposition. In the case above, `}<inlineCode parentName=\"p\">{`play`}</inlineCode>{` is a proposition saying \"If you give me a `}<inlineCode parentName=\"p\">{`Pitch`}</inlineCode>{`, I'll give you a term of type `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{`\". In the program, `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{` is `}<em parentName=\"p\">{`evidence`}</em>{` to play (we can also call it an argument to `}<inlineCode parentName=\"p\">{`play`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`play`}</inlineCode>{`'s input). Evidence to propositions, or equivalently arguments to functions, act like keys to a lock. The term `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{` of type `}<inlineCode parentName=\"p\">{`Pitch`}</inlineCode>{` unlocks the proposition `}<inlineCode parentName=\"p\">{`Pitch -> Player`}</inlineCode>{`, producing an `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{`. Because we have annotated our program `}<inlineCode parentName=\"p\">{`main`}</inlineCode>{` as `}<inlineCode parentName=\"p\">{`Player`}</inlineCode>{`, the compiler accepts the program, sends it to your loudspeaker and plays a note. w00t!`}</p>\n    <p>{`The fluidity with which one can switch between the language of logic (proving a proposition with evidence) and programming (applying to a function an argument) is called the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence\"\n      }}>{`Curry-Howard correspondence`}</a>{`. Informally, it posits that programs are logical proofs and vice versa. Granted, music is a highly `}<em parentName=\"p\">{`illogical`}</em>{` endeavor, so this type of rigorous formalism may seem out of place given the high degree of fantasy present in music composition and listening. The point of types here is to provide a set of constraints that accomplish two goals:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The constraints act as a proof that what you're building has the best chance to work as expected and produce the sound you're aiming to produce. This makes experimentation go faster.`}</li>\n      <li parentName=\"ol\">{`Like all art-forms, the constraints act simultaneously as a dialectical guide through `}<em parentName=\"li\">{`and`}</em>{` impediment to creation. It's the epiphanies we have as we are guided and impeded that help us make great work.`}</li>\n    </ol>\n    <h2>{`Our first composition(s)`}</h2>\n    <p>{`In the example above, we listened to our first note `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{` by applying the function `}<inlineCode parentName=\"p\">{`play`}</inlineCode>{` to it. Let's add together some more functions to see how far we can push that note.`}</p>\n    <p>{`We'll start by acting on the volume of the note as a function of time.  Let's make the note taper down to zero-volume over 5 seconds. To do so, we'll write a function that multiplies time by 0.1 and subtracts it from 1.0, which will smoothly interpolate from 1 to 0 over 5 seconds.`}</p>\n    <Player player={fadeNoteMain} code={fadeNote} mdxType=\"Player\" />\n    <p>{`An equivalent way to write that would be the following:`}</p>\n    <Player player={fadeNoteAltMain} code={fadeNoteAlt} mdxType=\"Player\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/purescript-wags/blob/81dd024e13ad2bdb6a2598b29e86105fa762b7a9/src/WAGS/Math.purs#L7\"\n      }}><inlineCode parentName=\"a\">{`calcSlope`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/purescript-wags-lib/blob/a1569215c2360461f70f1e6505d01ec3d5a72f05/src/WAGS/Lib/Tidal/Tidal.purs#L953\"\n      }}><inlineCode parentName=\"a\">{`betwixt`}</inlineCode></a>{` are functions provided by the libraries `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/purescript-wags\"\n      }}><inlineCode parentName=\"a\">{`wags`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mikesol/purescript-wags-lib\"\n      }}><inlineCode parentName=\"a\">{`wags-lib`}</inlineCode></a>{`, as will be the case of many of the functions we'll encounter along our path.  While we'll use these functions for convenience, it's often helpful to write them out by hand for learning purposes.  As a challenge throughout this and other articles, after reading the article once, try to write some these functions from scratch and compare them to the reference implementations.`}</p>\n    <p>{`When working with functions of time like calcSlope, one common convention is to leave `}<inlineCode parentName=\"p\">{`time`}</inlineCode>{` as the last argument. If we write a function `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`time`}</inlineCode>{` that internally calls a function `}<inlineCode parentName=\"p\">{`g`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`time`}</inlineCode>{`, we say that `}<inlineCode parentName=\"p\">{`time`}</inlineCode>{` is an `}<a parentName=\"p\" {...{\n        \"href\": \"https://wiki.haskell.org/Eta_conversion\"\n      }}><em parentName=\"a\">{`abstraction`}</em></a>{` over the function `}<inlineCode parentName=\"p\">{`g`}</inlineCode>{`. Without the time term, we call the function `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{` eta-reduced.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`f time = g time -- time abstracted over g\nf = g -- eta-reduced`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`This is similar to reducing a term in algebra:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`f + 2 = g + 2 -- ...is the same as stating that...\nf = g`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`The idea of abstraction (creating a function), along with application (otherwise known as `}<em parentName=\"p\">{`invoking`}</em>{` a function) are core to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Lambda_calculus\"\n      }}>{`Simple Lambda Calculus`}</a>{` and act as a basis for functional programming.`}</p>\n    <p>{`In order to eta-reduce the function in the example above, we introduce one of the most powerful ideas in functional programming - composition, which we will represent as `}<inlineCode parentName=\"p\">{`<<<`}</inlineCode>{`. When you compose two functions, you pipe the output of one into the input of another without `}<em parentName=\"p\">{`abstracting`}</em>{` the input to either function.  If we write `}<inlineCode parentName=\"p\">{`h time = f (g time)`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`time`}</inlineCode>{` is abstracted over `}<inlineCode parentName=\"p\">{`g`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`(g time)`}</inlineCode>{` is abstracted over `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{`. However, if we write `}<inlineCode parentName=\"p\">{`h = f <<< g`}</inlineCode>{`, the abstraction is eta-reduced `}<em parentName=\"p\">{`both`}</em>{` for `}<inlineCode parentName=\"p\">{`g`}</inlineCode>{`'s input `}<em parentName=\"p\">{`and`}</em>{` for `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{`'s input. Let's see that in the example using `}<inlineCode parentName=\"p\">{`betwixt`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`calcSlope`}</inlineCode>{`.`}</p>\n    <Player player={fadeNoteEtaMain} code={fadeNoteEta} mdxType=\"Player\" />\n    <p>{`Function composition is not just about terser syntax - as we will see in subsequent lessons on profunctors and free-semigroupoids, composition as an operation can be applied to other things besides functions. So working with at this higher level of abstraction, we unteather ourselves from functions and talk in more general terms about two things being composed. For me, describing the world abstractly in this way is one of the joys of both music and functional programming, making it possible to exploit structural similarities at multiple levels of abstraction.`}</p>\n    <h3>{`A bouquet of functions`}</h3>\n    <p>{`Let's write another function of time that makes our note step between different volumes in a cyclic fashion. We'll accomplish this using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://pursuit.purescript.org/packages/purescript-math/3.0.0/docs/Math#v:remainder\"\n      }}>{`remainder operator`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/purescript/documentation/blob/master/language/Pattern-Matching.md#guards\"\n      }}>{`guards`}</a>{`.`}</p>\n    <Player player={fadeNoteGuardMain} code={fadeNoteGuard} mdxType=\"Player\" />\n    <p>{`Lastly, we'll control the volume with a `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Low-frequency_oscillation\"\n      }}>{`low-frequency oscilator, or LFO`}</a>{`.`}</p>\n    <Player player={fadeNoteLfoMain} code={fadeNoteLfo} mdxType=\"Player\" />\n    <p>{`The one thing that all of these examples have in common is that they are functions of a `}<inlineCode parentName=\"p\">{`Number`}</inlineCode>{` that ouput a number. As the output of one can be the input of another, we can `}<em parentName=\"p\">{`compose`}</em>{` them together. Composition is an essential term in both music and functional programming, and their meanings largely overlap. When we compose music, we blend together sounds either in a sequence or simultaneously to crete a larger work. When we compose functions, we use the output of one as the input of another to create complex control parameters.`}</p>\n    <p>{`Let's compose three functions together using the purescript operator `}<inlineCode parentName=\"p\">{`<<<`}</inlineCode>{`. The first one will be our LFO, the second will add a constant offset, and the third will clip the wave at boundaires.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`Visually, the result looks something like this:`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`There's a special term for functions whose input type is the same as the output type. We call these `}<em parentName=\"p\">{`endo`}</em>{` functions - endo being a prefix from the Greek ἔνδον (endon) meaning \"within, inner, absorbing, or containing.\" We can chain together compositions of endo-functions to create some pretty jolting sounds.`}</p>\n    <p>{`The beautiful thing about chaining compositions where the input type and outp is that you can comment out different functions using two dashes `}<inlineCode parentName=\"p\">{`--`}</inlineCode>{` to radically change the result. In the example below, in addition to playing around with the values, try to comment out some functions (add `}<inlineCode parentName=\"p\">{`--`}</inlineCode>{`) and comment in (remove `}<inlineCode parentName=\"p\">{`--`}</inlineCode>{`) others.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`A taste of things to come`}</h2>\n    <p>{`In this article series, I will try to keep the pacing of the material more or less consistent. However, at certain points, I will glimpse into the future to show you where we are heading by subtly tweaking an example to provide a teaser for a future concept. We will have entire articles devoted to functors, applicatives, folds, semigroups and monoids, so consider this a small `}<em parentName=\"p\">{`mise en bouche`}</em>{` for the not-too-distant future.`}</p>\n    <h3>{`Functors and applicatives`}</h3>\n    <p>{`Currently, while we have a way to pipe output into an input via composition, we have no way to `}<em parentName=\"p\">{`blend`}</em>{` two results together. For example, if we want to add the result of an LFO to the result of a terraced function, we would write something like `}<inlineCode parentName=\"p\">{`(\\\\t -> lfo t + terraced t)`}</inlineCode>{`. While this is fine in small doses, it gets tedious if `}<em parentName=\"p\">{`everything`}</em>{` is a function of time. We'd like to somehow abstract away time so that we never directly have to deal with it. In functional programming, there are many ways to do this, including the `}<inlineCode parentName=\"p\">{`Reader`}</inlineCode>{` pattern (treating time as an environment) and the `}<inlineCode parentName=\"p\">{`Behavior`}</inlineCode>{` pattern (representing functions of time as a separate type). We'll see both of those in a later article, but what I'd like to show here is how to accomplish this using functors and applicatives.`}</p>\n    <p>{`The example above, using the Functor operation `}<inlineCode parentName=\"p\">{`<$>`}</inlineCode>{` and the Applicative operation `}<inlineCode parentName=\"p\">{`<*>`}</inlineCode>{`, can be written as `}<inlineCode parentName=\"p\">{`add <$> lfo <*> terraced`}</inlineCode>{`. There is no longer a `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` term and it still works. Let's hear it in a larger example:`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`If you're wondering what `}<inlineCode parentName=\"p\">{`<$>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<*>`}</inlineCode>{` are doing under the hood and how they relate to functions, there will be a whole lesson on applicatives that go over that. Here, I mostly want to build intution that you can blend together functions of time using binary operations like `}<inlineCode parentName=\"p\">{`add`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`pow`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`sub`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`mul`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` using `}<inlineCode parentName=\"p\">{`<$>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<*>`}</inlineCode>{`.`}</p>\n    <h3>{`Folds`}</h3>\n    <p>{`In functional programming, rather than applying a function to arguments, we often store arguments in a structure called a `}<em parentName=\"p\">{`free`}</em>{` structure and then `}<em parentName=\"p\">{`interpret`}</em>{` that structure later. Let's do that with composition. `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}><inlineCode parentName=\"a\">{`compose`}</inlineCode></a>{` is, after all, a function that is applied to two arguments. So, rather than applying it directly, let's store its arguments in a free structure (an Array, also known as a \"free monoid\") and then interpret it using a simple interpreter called `}<inlineCode parentName=\"p\">{`foldl`}</inlineCode>{` that applies a function (in this case, `}<inlineCode parentName=\"p\">{`compose`}</inlineCode>{`) to the arguments starting from an initial argument.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Etude`}</h2>\n    <p>{`Already, just using this technique, we can make some wicked one-note beats that give the one-note samba a run for its money! Below, I've written three functions - `}<inlineCode parentName=\"p\">{`f0`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`f1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`f2`}</inlineCode>{` - each of which create a one-note piece. The one currently slotted to play is called `}<inlineCode parentName=\"p\">{`f0`}</inlineCode>{`. Go ahead and substitute in and out different functions. Tweak them. Compose them. If you're up to it, try using `}<inlineCode parentName=\"p\">{`<$>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<*>`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`foldl`}</inlineCode>{` and see where they can take you!`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Scales`}</h2>\n    <p>{`Armed with our composition skills, we can approach pitch in the same way that we approached volume.  Before we do, though, it'd be useful to talk a bit about scales and perception of pitch and volume. While one can be plenty creative without knowing these scales, mastering them makes it easier to anticipate how music will be heard in certain cultural contexts.`}</p>\n    <p>{`In the previous example, when we were linearly changing volume between 0 and 1, the change from `}<inlineCode parentName=\"p\">{`0.0-0.5`}</inlineCode>{` felt `}<em parentName=\"p\">{`much`}</em>{` greater than the change from `}<inlineCode parentName=\"p\">{`0.5-1.0`}</inlineCode>{`. This is because, while we scaled the amplitude of the waves in the air linearly, we hear that change `}<em parentName=\"p\">{`logarithmically`}</em>{`. The unit for logarithmic amplitude is the `}<strong parentName=\"p\">{`bel`}</strong>{`, and in almsot all literature on sound, you'll hear folks talking about tenths of bels, or `}<strong parentName=\"p\">{`decibels`}</strong>{` (dB for short).  Below is a chart that shows linear increase of loudness from 0 to 1 and the corresponding change in decibels.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`We can bring this even closer to human perception using `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Equal-loudness_contour\"\n      }}>{`Fletcher-Munson curves`}</a>{`, also known as equal-loudness contours. This adds ripples into our logarithmic model that represent the ideosyncracies of human hearing. Many sensible defaults in industry-grade automatic equalization and mastering software are based on these curves.  In the examples below, we'll use a function that changes volume on a logarithmic rather than linear scale, and perhaps you will perceive it as being more smooth or gradual.`}</p>\n    <p>{`Pitch also exists on many different scales, and depending on our choice of scale, we can have radically different musical outocmes that are evokative of cultures that span the globe. When we use notes like `}<inlineCode parentName=\"p\">{`c4`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`aFlat3`}</inlineCode>{` in the examples, we are using a scale called the equally-tempered chromatic scale which became standardized in Europe in the 18th century and is currently the basis of most popular music.  The equally-tempered scale is also a logarithmic one: we perceive two pitches to be of the same class when one is a multiple of two of the other one. For example, most people hear 220.0, 440.0, 880.0 and 1760.0 as the same note shifted higher and higher.  In fact, let's let that be the basis of our first exmaple on pitch.  We'll use a function similar to the terraced function we used for volume, but we will use values that correspond to jumping octaves.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Pitch`}</h2>\n    <p>{`All of the same functions we used to control volume can also be used to control the pitch of our single note. Let's scale them from their 0-1 range as values to a range that makes more sense for pitch. Again, we'll use composition for this.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`We can also use `}<inlineCode parentName=\"p\">{`<$>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<*>`}</inlineCode>{` to apply binary operators to pitch, just as we did on rhythm.  Interestingly, we see that when we add an octave twice to a pitch, this has the effect of multiplying it by 4`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`This is because `}<inlineCode parentName=\"p\">{`Pitch`}</inlineCode>{` adheres to a different meaning of `}<inlineCode parentName=\"p\">{`add`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mul`}</inlineCode>{` than `}<inlineCode parentName=\"p\">{`Number`}</inlineCode>{`.  In functional programming, the behavior of operators like `}<inlineCode parentName=\"p\">{`add`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mul`}</inlineCode>{` can vary from type to type so long as they adhere to certain predefined laws. Here, addition and multiplcation are the two operators that form a `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Semiring\"\n      }}>{`Semiring`}</a>{` and, as such, need to conform to semiring laws of being commutative over addition and distributive over multiplication. Let's test out those laws in music!`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`Indeed, we see that the addition of pitch commutes - `}<inlineCode parentName=\"p\">{`a + (b + c) = (a + b) + c`}</inlineCode>{`. Furthermore, multiplication distributes: `}<inlineCode parentName=\"p\">{`a * (b + c) = a * b + a * c`}</inlineCode>{`. The abiltiy to define custom behavior of functions on types based on laws is a core feature of most programming languages in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/ML_(programming_language)\"\n      }}>{`ML-family`}</a>{`, including `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`Haskell`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`Idris`}</a>{`, and the language used for these examples - `}<inlineCode parentName=\"p\">{`PureScript`}</inlineCode>{`. The fact that a single function operates differently on different types according to an underlying law is a deeply musical idea. It is the essence of a `}<em parentName=\"p\">{`theme`}</em>{` or `}<em parentName=\"p\">{`motif`}</em>{`: something that can function differently in different contexts while retaining its identity.`}</p>\n    <p>{`Getting less mathy for a bit, I'll close this section on pitch with two examples. The first will shows how to use simple data structures - in this case an array - to hold a musical score that we can play back to get a fun little Bach minuet.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`The second is more abstract and experimental in nature, weaving a tapestry of pitches that brings me to a trance-like place.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`In both cases, the same basic operations - functions of time - lead to different worlds, all the while keeping the rather austere constraint of a single note that can change only in pitch or volume.`}</p>\n    <h2>{`Deconstructing and reconstructing`}</h2>\n    <p>{`One of my favorite aspects about both music and functional programming is that anything can be a unit of construction or a subject of deconstruction. Often these two processes can happen at the same time. As a last exercise, and as a glimpse into the future, let's take our first `}<inlineCode parentName=\"p\">{`lfo`}</inlineCode>{` example and write it in a slightly different syntax with a different timbre. Here, instead of using one note, we'll use six. However, as the six notes will be playing at the same time, we'll hear them as a single organ-like sound.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`Now, let's undercut the unity of our sound by pulling it apart over time. To do this, we'll again use `}<inlineCode parentName=\"p\">{`<$>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<*>`}</inlineCode>{`. And again, we'll have a whole article devoted entirely to unpacking what `}<inlineCode parentName=\"p\">{`<$>`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<*>`}</inlineCode>{` mean - for now we can treat them as building blocks for binary operations on functions of time.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Conclusion`}</h2>\n    <p>{`In this section, we learned how to use functional programming to shape a single note. We saw how we can compose together functions to modulate the pitch and amplitude of that note, and we saw how to compose together several notes into one larger note that decomposes and recomposes as we listen to it. With these techniques, we can make fun little instruments like the one below, the source code of which can be found `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`here`}</a>{`. I hope you enjoy playing it, and I'll see you in the next article!`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"https://github.com/mikesol/purescript-wags\"\n        }}>{`Click here`}</a>{` for additional resources for working with these examples on the cloud, on Windows, on Mac or on Linux. `}<a parentName=\"p\" {...{\n          \"href\": \"https://purescript.org\"\n        }}>{`Click here`}</a>{` to learn more about the PureScript programming language.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","icon","faPlayCircle","parentName","player","singleNoteMain","code","singleNote","fadeNoteMain","fadeNote","fadeNoteAltMain","fadeNoteAlt","fadeNoteEtaMain","fadeNoteEta","fadeNoteGuardMain","fadeNoteGuard","fadeNoteLfoMain","fadeNoteLfo","stub","isMDXComponent"],"sourceRoot":""}