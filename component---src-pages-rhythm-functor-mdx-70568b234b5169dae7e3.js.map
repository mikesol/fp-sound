{"version":3,"file":"component---src-pages-rhythm-functor-mdx-70568b234b5169dae7e3.js","mappings":"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","sources":["webpack://soundly-functional/./src/pages/rhythm-functor.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport { Player } from \"../components/player\";\nimport Footer from \"../components/footer\";\nimport singleNote from \"../FPSound/Intro/SingleNote.purs\";\nimport { main as singleNoteMain } from \"../../output/FPSound.Intro.SingleNote/\";\nimport header from \"../FPSound/RhythmFunctor/Header.purs\";\nimport { main as headerMain } from \"../../output/FPSound.RhythmFunctor.Header/\";\nimport rhythmPrimo from \"../FPSound/RhythmFunctor/RhythmPrimo.purs\";\nimport { main as rhythmPrimoMain } from \"../../output/FPSound.RhythmFunctor.RhythmPrimo/\";\nimport rhythmSegundo from \"../FPSound/RhythmFunctor/RhythmSegundo.purs\";\nimport { main as rhythmSegundoMain } from \"../../output/FPSound.RhythmFunctor.RhythmSegundo/\";\nimport birdsBirdsBirds from \"../FPSound/RhythmFunctor/BirdsBirdsBirds.purs\";\nimport { main as birdsBirdsBirdsMain } from \"../../output/FPSound.RhythmFunctor.BirdsBirdsBirds/\";\nimport lowFi from \"../FPSound/RhythmFunctor/LowFi.purs\";\nimport { main as lowFiMain } from \"../../output/FPSound.RhythmFunctor.LowFi/\";\nimport smwyg from \"../FPSound/RhythmFunctor/SMWYG.purs\";\nimport { main as smwygMain } from \"../../output/FPSound.RhythmFunctor.SMWYG/\";\nimport smwyg2 from \"../FPSound/RhythmFunctor/SMWYG2.purs\";\nimport { main as smwyg2Main } from \"../../output/FPSound.RhythmFunctor.SMWYG2/\";\nimport transpose from \"../FPSound/RhythmFunctor/Transpose.purs\";\nimport { main as transposeMain } from \"../../output/FPSound.RhythmFunctor.Transpose/\";\nimport speed from \"../FPSound/RhythmFunctor/Speed.purs\";\nimport { main as speedMain } from \"../../output/FPSound.RhythmFunctor.Speed/\";\nimport omit from \"../FPSound/RhythmFunctor/Omit.purs\";\nimport { main as omitMain } from \"../../output/FPSound.RhythmFunctor.Omit/\";\nimport manyMaps from \"../FPSound/RhythmFunctor/ManyMaps.purs\";\nimport { main as manyMapsMain } from \"../../output/FPSound.RhythmFunctor.ManyMaps/\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`The rhythm and the functor`}</h1>\n    <p>{`Rhythms transport humans and functors transport categories. By the end of this post, I want you to have a working understanding of what functors are with respect to categories and what the rhythms are with respect to music. Even more importantly, I want you to feel the rhythm of functors and grok the functorality of rhythm.`}</p>\n    <Player player={headerMain} code={header} mdxType=\"Player\" />\n    <h2>{`Rhythm`}</h2>\n    <p>{`A rhythm is a series of unaccented and accented moments in time. The accents are demarcated by changes in metric placement, volume, timbre and harmony.`}</p>\n    <Player player={rhythmPrimoMain} code={rhythmPrimo} mdxType=\"Player\" />\n    <p>{`Its the delicate mix of symmetry and asymmetry in rhythm that deeply moves us. Some of this is certainly culturally delimited, stemming from the use of certain instruments or voices or pitch languages.`}</p>\n    <Player player={rhythmSegundoMain} code={rhythmSegundo} mdxType=\"Player\" />\n    <p>{`Other aspects of rhythm's power feels more intrinsic. When we catch ourselves being taken aback by the rhythm of a forest or of a machine, we struggle to explain why, and that's of course ok.`}</p>\n    <Player player={birdsBirdsBirdsMain} code={birdsBirdsBirds} mdxType=\"Player\" />\n    <p>{`Rhythm has been the subject of a rich hermeneutic tradition throughout the ages — Plato compared it to both an orderly life and the most intimate of personal tastes and convictions in `}<a parentName=\"p\" {...{\n        \"href\": \"http://classics.mit.edu/Plato/republic.4.iii.html\"\n      }}>{`The Republic`}</a>{`. The free use of mixed metaphors that liken rhythm to internal and external phenomena show both the difficulty in classifying it and the captivating power it has over us.`}</p>\n    <Player player={lowFiMain} code={lowFi} mdxType=\"Player\" />\n    <p>{`Like many things in music, rhythm often exists as a conversation with the past, taking the old and creativly deforming it into something new. One of my favorite examples of this is JAY-Z's `}<em parentName=\"p\">{`Show Me What you Got`}</em>{`.`}</p>\n    <Player player={smwygMain} code={smwyg} mdxType=\"Player\" />\n    <p>{`I could go on forever about why I love this rhythm. Some reasons probably include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The bold accents on the backbeats coupled with the relatively weak downbeats.`}</li>\n      <li parentName=\"ul\">{`The alternation between highly regular measures and measures with a free sens of time.`}</li>\n      <li parentName=\"ul\">{`The slow pace of the horns and sax against the drum groove and piano glissandos.`}</li>\n      <li parentName=\"ul\">{`The very (very) laid-back backbeat on most beat-2s.`}</li>\n      <li parentName=\"ul\">{`The rap itself, which flows in and out of the meter in really subtle ways.`}</li>\n    </ul>\n    <p>{`But at the end of the day when I'm listening to it I don't think about any of these things: I just love it. And I love to remix it!`}</p>\n    <Player player={smwyg2Main} code={smwyg2} mdxType=\"Player\" />\n    <h2>{`Categories`}</h2>\n    <p>{`In the `}<a parentName=\"p\" {...{\n        \"href\": \"../note-function\"\n      }}>{`previous post`}</a>{`, we explored the difference between types and terms. In PureScript and related programming languages, the sum total of all possible types and the functions between the terms that inhabit these types make up a `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Category_(mathematics)\"\n      }}><em parentName=\"a\">{`category`}</em></a>{`. In this category, types are `}<em parentName=\"p\">{`objects`}</em>{` (or nodes) and functions are `}<em parentName=\"p\">{`morphisms`}</em>{` (or arrows). Let's call PureScript's category `}<strong parentName=\"p\">{`Purs`}</strong>{`, hereafter referred to as 𝕻 for short.`}</p>\n    <p>{`For something to be a category, it needs to follow two rules:`}</p>\n    <h3>{`Rule 1 - Identity`}</h3>\n    <p>{`All objects must have an identity morphism that goes from it back to it. For every type `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` in 𝕻, we can construct a function `}<inlineCode parentName=\"p\">{`a -> a`}</inlineCode>{` that returns the input as output.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`class Category c where\n  identity :: forall a. c a a\n\ninstance Category (->) where\n  identity a = a`}</code>{`\n        `}</deckgo-highlight-code>\n    <h3>{`Rule 2 - Composition`}</h3>\n    <p>{`If there exists a morphism from `}<inlineCode parentName=\"p\">{`C -> D`}</inlineCode>{` and a morphism from `}<inlineCode parentName=\"p\">{`B -> C`}</inlineCode>{`, there exists a morphism from `}<inlineCode parentName=\"p\">{`B -> D`}</inlineCode>{` that is formed by first going from `}<inlineCode parentName=\"p\">{`B`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{` and then from `}<inlineCode parentName=\"p\">{`C`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`D`}</inlineCode>{`. If we look at the definition of `}<a parentName=\"p\" {...{\n        \"href\": \"https://pursuit.purescript.org/packages/purescript-prelude/5.0.1/docs/Control.Semigroupoid#t:Semigroupoid\"\n      }}>{`compose`}</a>{`, a function we used extensively in the last section, it is `}<inlineCode parentName=\"p\">{`forall b c d. a c d -> a b c -> a b d`}</inlineCode>{` where `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` is an arbitrary semigroupoid (in this case, a function). So, when specialized to functions, this can be written as `}<inlineCode parentName=\"p\">{`forall b c d. (c -> d) -> (b -> c) -> (b -> d)`}</inlineCode>{`.`}</p>\n    <p>{`So 𝕻 is a category, and where there are categories, there are functors.`}</p>\n    <h2>{`Functors`}</h2>\n    <p>{`A `}<a parentName=\"p\" {...{\n        \"href\": \"https://bartoszmilewski.com/2015/01/20/functors/\"\n      }}>{`functor`}</a>{` is a mapping of objects and morphisms from one category to another category. As PureScript can't go outside of PureScript (yet!), the functors we will look at are from 𝕻 to 𝕻. Functors from a category back to itself are called `}<em parentName=\"p\">{`endo-functors`}</em>{`.`}</p>\n    <p>{`Any category can be described completely in terms of its morphisms, as all objects can be indexed by their identity morphism. Because of this special property of categories, functors can be described by how they map `}<em parentName=\"p\">{`morphisms`}</em>{` to `}<em parentName=\"p\">{`morphisms`}</em>{`. In PureScript, one way this is done is called `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{`.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`class Functor f where\n  map :: forall a b. (a -> b) -> (f a -> f b)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`The parentheses around `}<inlineCode parentName=\"p\">{`f a -> f b`}</inlineCode>{` can be dropped and it would mean the same thing, but I like them because they make it clear that we are mapping a morphism `}<inlineCode parentName=\"p\">{`a -> b`}</inlineCode>{` to a `}<em parentName=\"p\">{`new`}</em>{` moprhism from `}<inlineCode parentName=\"p\">{`f a -> f b`}</inlineCode>{`, where both `}<inlineCode parentName=\"p\">{`f a`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`f b`}</inlineCode>{` are objects somewhere else in the vast category of 𝕻. Importantly, the mapping in PureScript's `}<inlineCode parentName=\"p\">{`Functor`}</inlineCode>{` class is called a `}<strong parentName=\"p\">{`covariant`}</strong>{` mapping, meaning the direction of morphisms in the source category and the destination are the same (they \"vary\" in the same direction). Not all functors are covariant, but the most common ones in programming are, and the word \"functor\" is used interchangeably with \"covariant functor.\"`}</p>\n    <p>{`Some classic covariant functors include `}<inlineCode parentName=\"p\">{`Maybe`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`List`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Array`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Proxy`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Tuple a`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Either a`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Const a`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Map k`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Function a`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Identity`}</inlineCode>{`. For example, the `}<inlineCode parentName=\"p\">{`Maybe`}</inlineCode>{` functor transports the function `}<inlineCode parentName=\"p\">{`not :: Boolean -> Boolean`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`Maybe Boolean -> Maybe Boolean`}</inlineCode>{`. Those with type variables, like `}<inlineCode parentName=\"p\">{`Tuple a`}</inlineCode>{`, represent families of functors: one for every type. Meaning that `}<inlineCode parentName=\"p\">{`Tuple Int`}</inlineCode>{` is a functor, `}<inlineCode parentName=\"p\">{`Tuple Boolean`}</inlineCode>{` is a functor, etc. `}</p>\n    <h2>{`Music + Functors`}</h2>\n    <p>{`As a general strategy, anytime you transport a musical entity to a new place, you can think of a functor being applied to it. Transpose a scale? There's a functor for that.`}</p>\n    <Player player={transposeMain} code={transpose} mdxType=\"Player\" />\n    <p>{`Speed it up? There's a functor for that.`}</p>\n    <Player player={speedMain} code={speed} mdxType=\"Player\" />\n    <p>{`Get louder based on the note? There's a functor for that too!`}</p>\n    <Player player={omitMain} code={omit} mdxType=\"Player\" />\n    <p>{`The power of functors lies in their ability to \"lift\" functions from a context to another one. This means that, for example, instead of writing `}<inlineCode parentName=\"p\">{`[transpose wholeTone c4, transpose wholeTone d4, transpose wholeTone e4]`}</inlineCode>{` we can write `}<inlineCode parentName=\"p\">{`map (transpose wholeTone) [c4, d4, e4]`}</inlineCode>{` and be done with it.`}</p>\n    <p>{`We can also partially apply `}<inlineCode parentName=\"p\">{`map (transpose wholeTone)`}</inlineCode>{` to create a function that will lift the morphism `}<inlineCode parentName=\"p\">{`transpose wholeTone`}</inlineCode>{` to `}<em parentName=\"p\">{`any`}</em>{` functor that has pitches inside of it. In the example below, the functors in question are `}<inlineCode parentName=\"p\">{`NonEmpty Array`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Cofree Identity`}</inlineCode>{`.`}</p>\n    <Player player={manyMapsMain} code={manyMaps} mdxType=\"Player\" />\n    <p>{`One of the most common types of functors is a collection like a `}<inlineCode parentName=\"p\">{`List`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Object`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Array`}</inlineCode>{`. Insofar as a rhythm is a connection of notes, we can think of functors as lifting functions (morphisms) from individual elements of rhythms to the whole rhythm. What comes out the other end is a new rhythm...`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`...or another rhythm...`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`...or something that most would not call a rhythm but I still find eerily pleasant...`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Functor road-show`}</h2>\n    <p>{`Let's take functors for a spin! Each of these examples uses `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{` is a slightly different way to achieve a slightly different effect.`}</p>\n    <h3>{`A`}</h3>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h3>{`B`}</h3>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h3>{`C`}</h3>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Applicative functors`}</h2>\n    <p>{`Functors in PureScript lift functions (morphisms) from 𝕻 to somewhere else in 𝕻. But what if you want to work with a function that's already been lifted? For example, if we don't have `}<inlineCode parentName=\"p\">{`(a -> b)`}</inlineCode>{` but rather we have `}<inlineCode parentName=\"p\">{`f (a -> b)`}</inlineCode>{`, can we still use it?`}</p>\n    <p>{`Types that are applicative functors answer with a resounding YES. Applicative functors are exactly like `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{` but work on functions that have already been lifted:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`class Apply f where\n  apply :: forall a b. f (a -> b) -> (f a -> f b)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`The most common use case for applicative functors is partially applied functions, which we saw in several examples from the `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}>{`previous article`}</a>{`.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Indexed functors`}</h2>\n    <p>{`In category theory, objects are indivisible. One is not allowed to peek inside of objects to know anything about them. This means that `}<inlineCode parentName=\"p\">{`Boolean`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Unit`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Void`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Int`}</inlineCode>{` are all the same in the eyes of a category theorist, and a for a functor to be a functor, it needs to operate indiscriminately on all of these types.`}</p>\n    <p>{`However, in 𝕻, this restriction is to severe.  We `}<em parentName=\"p\">{`are`}</em>{` able to reason about certain properties of the inhabitants of objects, aka `}<em parentName=\"p\">{`terms`}</em>{`. For example, we know that the cardinality of the `}<inlineCode parentName=\"p\">{`Boolean`}</inlineCode>{` is 2 - `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{`. In addition, certain types are commonly understood to have terms with an inherent `}<em parentName=\"p\">{`ordinality`}</em>{`, meaning that their contents can be indexed by a natural number. This is most apparent in lists, where the first term in a list can be assigned the ordinal number 0, the second term 1, and so forth until the end of the list. It is important to state, however, that these ordinalities are entirely subjective. While ordering the elements of a list `}<em parentName=\"p\">{`0,1,2,...,n`}</em>{` may feel intuitive, there is nothing axiomatically \"correct\" about this order. On the other hand, lists verifiably have the cardinality of `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Cardinality_of_the_continuum\"\n      }}>{`ℵ1`}</a>{`.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`Indexed functors are applicative functors that create a lifted function `}<inlineCode parentName=\"p\">{`f (a -> b)`}</inlineCode>{` by lifting a function `}<inlineCode parentName=\"p\">{`i -> a -> b`}</inlineCode>{` to a `}<inlineCode parentName=\"p\">{`f i`}</inlineCode>{` that contains the index `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` in order. While natural numbers is a common index, it is not the only one possible. The full signature is:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`class FunctorWithIndex f i | f -> i where\n  mapWithIndex :: (i -> a -> b) -> f a -> f b`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`The arrow from `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` in the class signature is called a `}<em parentName=\"p\">{`functional dependency`}</em>{` and indicates that the choice of `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{` completely determines `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` or, in other words, that `}<inlineCode parentName=\"p\">{`i`}</inlineCode>{` depends (in this case exclusively) on `}<inlineCode parentName=\"p\">{`f`}</inlineCode>{`.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`Indices are crucial in rhythm - they are the signposts that make rhythm come alive. The reason I can talk about JAY-Z delaying the backbeat of beat-2 is because I can reference `}<em parentName=\"p\">{`three`}</em>{` indices: beat-2 (four beats in a measure, so indexed by `}<em parentName=\"p\">{`0,1,2,3`}</em>{`) and backbeat (splitting a beat in two, so indexed `}<em parentName=\"p\">{`0,1`}</em>{`) and the hesitation on the backbeat, meaning how much we are delaying it (indexed by a real number, so ℵ1).  We can use an indexed functor to act on several of these indices at once.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Contravariant functors`}</h2>\n    <p>{`One great feature of category theory is that you get another category for free by \"flipping the arrows\". For example, if a catgory `}<inlineCode parentName=\"p\">{`X`}</inlineCode>{` has objects `}<inlineCode parentName=\"p\">{`A`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`B`}</inlineCode>{` and morphisms `}<inlineCode parentName=\"p\">{`A -> A`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`B -> B`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`A -> B`}</inlineCode>{`, we get a new category `}<inlineCode parentName=\"p\">{`Y`}</inlineCode>{` simply by flipping the arrows, meaning `}<inlineCode parentName=\"p\">{`A -> A`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`B -> B`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`B -> A`}</inlineCode>{`. Note that `}<inlineCode parentName=\"p\">{`Y`}</inlineCode>{` is purely theoretical: often times, if a category represents a real-world phenomena (ie if `}<inlineCode parentName=\"p\">{`->`}</inlineCode>{` is time), we can't flip the arrows and get a time machine for free. But on paper, all categories are flippable, and a large subset of 𝕻 `}<em parentName=\"p\">{`is`}</em>{` in fact flippable (certain important functions, like `}<a parentName=\"p\" {...{\n        \"href\": \"https://pursuit.purescript.org/packages/purescript-prelude/5.0.1/docs/Data.Void#v:absurd\"\n      }}><inlineCode parentName=\"a\">{`absurd`}</inlineCode></a>{`, cannot be flipped).`}</p>\n    <p>{`Functors can be applied to these flipped categories and, when they are, they're called `}<strong parentName=\"p\">{`contravariant`}</strong>{` functors. `}<em parentName=\"p\">{`Contra`}</em>{` is used here in its colloquial sense of \"in the opposite direction.\"`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`class Contravariant f where\n  cmap :: forall a b. (a -> b) -> (f b -> f a)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{` are flipped on the right-hand side.`}</p>\n    <p>{`Contravariant functors make sense when the object being lifted is the `}<em parentName=\"p\">{`input`}</em>{` to some system. For example, consider the `}<inlineCode parentName=\"p\">{`Predicate`}</inlineCode>{`, defined as:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`newtype Predicate a = Predicate (a -> Boolean)\nevalPredicate :: forall a. Predicate a -> a -> Boolean\nevalPredicate (Predicate f) a = f a\n-- same as evalPredicate (Predicate f) = f\n-- same as evalPreidcate = coerce`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`A common predicate is determining if a number is non-negative.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`nonNegativeNumber = Predicate ((<=) 0.0)`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`If we want this to apply to integers, we can use `}<inlineCode parentName=\"p\">{`cmap`}</inlineCode>{` like so:`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`-- toNumber :: Int -> Number\nnonNegativeInt = cmap toNumber nonNegativeNumber`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`Contravariant functors are useful in music when we have a common base operation and we want it to produce a result for different inputs. For example, we can use the same `}<inlineCode parentName=\"p\">{`Predicate`}</inlineCode>{` on `}<inlineCode parentName=\"p\">{`Pitch`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Duration`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Volume`}</inlineCode>{` by using different versions of `}<inlineCode parentName=\"p\">{`cmap`}</inlineCode>{`.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`Profunctors`}</h2>\n    <p>{`Profunctors are my favorite types of functors. They combine contravariant functors and plain ol' functors in a rather incredible way, and I find that they give the biggest bang for your buck of any concept from functional programming.`}</p>\n    <p>{`A pro-functor takes a pair of morphisms - one from an opposite (contravariant) category and one from the \"normal\" covariant catgory, and maps them to yet-another category. As all we have is 𝕻, this will have to exist entirely within 𝕻, which we can accomplish through a mapping function that takes two morphisms and lifts them to operate on a functor that contains type variabls `}<em parentName=\"p\">{`both`}</em>{` in a contravariant and a covariant position.`}</p>\n    <deckgo-highlight-code {...{\n      \"language\": \"haskell\"\n    }}>{`\n          `}<code parentName=\"deckgo-highlight-code\" {...{\n        \"slot\": \"code\"\n      }}>{`class Profunctor p where\n  dimap :: forall a b c d. (a -> b) -> (c -> d) -> p b c -> p a d`}</code>{`\n        `}</deckgo-highlight-code>\n    <p>{`The most common profunctor you'll come across is the `}<inlineCode parentName=\"p\">{`Function`}</inlineCode>{`. Specialized to function, `}<inlineCode parentName=\"p\">{`dimap`}</inlineCode>{` becomes `}<inlineCode parentName=\"p\">{`(a -> b) -> (c -> d) -> (b -> c) -> (a -> d)`}</inlineCode>{`. This is sort of like spelunking. If you give me a way to get down to the cave `}<inlineCode parentName=\"p\">{`a -> b`}</inlineCode>{`, a way to get back up `}<inlineCode parentName=\"p\">{`c -> d`}</inlineCode>{`, and some time in the cave `}<inlineCode parentName=\"p\">{`b -> c`}</inlineCode>{`, I'll give you back a spelunking trip `}<inlineCode parentName=\"p\">{`a -> d`}</inlineCode>{`.`}</p>\n    <p>{`Another metaphor that is more apt for this context is `}<em parentName=\"p\">{`editing`}</em>{`. If you give me a way to zoom into a piece of music `}<inlineCode parentName=\"p\">{`a -> b`}</inlineCode>{`, a way to zoom out after you've made a change `}<inlineCode parentName=\"p\">{`c -> d`}</inlineCode>{`, and a change `}<inlineCode parentName=\"p\">{`b -> c`}</inlineCode>{`, I'll give you a function that changes a piece from `}<inlineCode parentName=\"p\">{`a -> d`}</inlineCode>{`. Here, argument order is crucial: if we partially apply dimap in a function `}<inlineCode parentName=\"p\">{`editScore = dimap zoomIn zoomOut`}</inlineCode>{`, then `}<inlineCode parentName=\"p\">{`editScore`}</inlineCode>{` takes an editing function `}<inlineCode parentName=\"p\">{`b -> c`}</inlineCode>{` and returns a function from an old score `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` to a new score `}<inlineCode parentName=\"p\">{`d`}</inlineCode>{`. The ideas of zooming in & out are `}<em parentName=\"p\">{`visual`}</em>{` metaphors, and profunctors are often described based on the behavior of light. Other examples are the `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}><inlineCode parentName=\"a\">{`Optic`}</inlineCode></a>{`, the `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}><inlineCode parentName=\"a\">{`Lens`}</inlineCode></a>{` and the `}<a parentName=\"p\" {...{\n        \"href\": \"\"\n      }}><inlineCode parentName=\"a\">{`Prism`}</inlineCode></a>{`. The zooming I've just described is in fact a `}<inlineCode parentName=\"p\">{`Lens`}</inlineCode>{`, and there are two resources I know of that cover profunctor optics exhaustively:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A`}</li>\n      <li parentName=\"ul\">{`B`}</li>\n    </ul>\n    <p>{`All of the setters in the `}<inlineCode parentName=\"p\">{`wags-lib`}</inlineCode>{` library are profunctors. They are the stuff music is made of. In the following example, we use eight different profunctor lenses:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A`}</li>\n      <li parentName=\"ol\">{`A`}</li>\n      <li parentName=\"ol\">{`A`}</li>\n      <li parentName=\"ol\">{`A`}</li>\n      <li parentName=\"ol\">{`A`}</li>\n      <li parentName=\"ol\">{`A`}</li>\n      <li parentName=\"ol\">{`A`}</li>\n      <li parentName=\"ol\">{`A`}</li>\n    </ol>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`We can even make our own - here is a different example with two hand-rolled lenses to modulate X and Y.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`Profunctors are when things get interesting: they can zoom into data structures with arbitrary levels of precision (contravariant) and come back out (covariant). Going back to the definition of rhythm as a subtle dance of symmetries and asymmetries in accents over time, profunctors take something bland...`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`...and shape it so that it has `}<em parentName=\"p\">{`rhythm`}</em>{`!`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <h2>{`On the functorality of rhythms and the rhythm of functors`}</h2>\n    <p>{`In this article, we looked at five different variations on the theme of the functor:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Covariant functor`}</li>\n      <li parentName=\"ul\">{`Applicative functor`}</li>\n      <li parentName=\"ul\">{`Indexed functor`}</li>\n      <li parentName=\"ul\">{`Contravariant functor`}</li>\n      <li parentName=\"ul\">{`Profunctor`}</li>\n    </ul>\n    <p>{`We heard musical examples of how all five can drive a rhythm. At the risk of being gaudy, here's an example of all five shaping a piece of music.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <p>{`Rhythms are functors because they map musical events like notes to a new place where the events have (a) order and (b) variety (dynamic, agogic, harmonic etc). But do functors have a rhythm? Functors map object to new places like `}<inlineCode parentName=\"p\">{`Int`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`Maybe Int`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Boolean`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`List Boolean`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`Event String`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Number`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`Tuple Unit Number`}</inlineCode>{`. What the objects become in these new contexts are anyone's guess. In `}<inlineCode parentName=\"p\">{`Maybe Int`}</inlineCode>{` the existence of the `}<inlineCode parentName=\"p\">{`Int`}</inlineCode>{` becomes optional, in `}<inlineCode parentName=\"p\">{`List Boolean`}</inlineCode>{` the existence of the `}<inlineCode parentName=\"p\">{`Boolean`}</inlineCode>{` becomes multiple, in `}<inlineCode parentName=\"p\">{`Event String`}</inlineCode>{` the existence of the `}<inlineCode parentName=\"p\">{`String`}</inlineCode>{` becomes both multiple and temporal and in `}<inlineCode parentName=\"p\">{`Tuple Unit Number`}</inlineCode>{` the existence of `}<inlineCode parentName=\"p\">{`Number`}</inlineCode>{` remains singular but it gets a buddy `}<inlineCode parentName=\"p\">{`Unit`}</inlineCode>{`. The elusive and wide-raning nature of the little bit of flair that functors can add is as rich, subtle, and surprising as the numerous ways a note can be accented. A note can disappear altogether (rest), be muted (con sordino), be delayed (rubato), or be played several times in rapid succession (tremolo). In this way, functors act as the accents of categories.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Functor`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Agogic`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Proxy`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`rest`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Behavior`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`drone`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Vec D3`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`triad`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tuple Percussion`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`orchestration`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`But what about order? For functors to have rhythm, it is not enough that they add accents to a catgory. They must also create some type of order.`}</p>\n    <p>{`Morphisms in categories can be thought of as `}<em parentName=\"p\">{`ordering`}</em>{` the category. In 𝕻, for example, `}<inlineCode parentName=\"p\">{`->`}</inlineCode>{` implies a before-after relationship between types. A function must receive its input `}<em parentName=\"p\">{`before`}</em>{` yielding its output.`}</p>\n    <p>{`A functor cannot reorder its source category because it must preserve morphisms. However, nothing stops a functor from conflating many morphisms into the same one (and, by extention, many objects to the same object). The extreme example of this is `}<inlineCode parentName=\"p\">{`Proxy`}</inlineCode>{`, which maps all objects a single object and all morphisms to a single morphism.`}</p>\n    <p>{`𝕻 is an unfathomably rich source category - it conains arrows from all terms to all other terms `}<em parentName=\"p\">{`except`}</em>{` in the case where the source is inhabited and the destination is not. Meaning that you won't find anything of the signature `}<inlineCode parentName=\"p\">{`a -> Void`}</inlineCode>{` unless `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` itself is uninhabited. These functions are rare and are almost exclusively used when proving something to a compiler via `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.idris-lang.org/en/latest/tutorial/theorems.html#the-empty-type\"\n      }}>{`proof by contradiction`}</a>{`. This means that a functor has at its disposal infintely many connections and can reduc them to its own special order, much like a sculptor starts from slab of marble with limitless possibilities and arrives at a beautifully-proportioned work of art.`}</p>\n    <p>{`By assigning an accent (a quality or mood) to a type and by pruning the vast, order-rich 𝕻 to something with a more slimmed-down order (including no order at all), when we apply functors, we are breathing rhythm into types. So rhythms are not just functors - functors are rhythms. They both transport us to new places, and some of my greatest joys in life come when a new functor or rhythm transports me to an entirely new place that I would have never imagined before.`}</p>\n    <Player stub player={singleNoteMain} code={singleNote} mdxType=\"Player\" />\n    <Footer mdxType=\"Footer\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","player","headerMain","code","header","rhythmPrimoMain","rhythmPrimo","rhythmSegundoMain","rhythmSegundo","birdsBirdsBirdsMain","birdsBirdsBirds","parentName","lowFiMain","lowFi","smwygMain","smwyg","smwyg2Main","smwyg2","transposeMain","transpose","speedMain","speed","omitMain","omit","manyMapsMain","manyMaps","stub","singleNoteMain","singleNote","isMDXComponent"],"sourceRoot":""}